#apiVersion: tekton.dev/v1beta1
apiVersion: tekton.dev/v1
kind: PipelineRun
metadata:
  name: base-image
  annotations:
    # The event we are targeting as seen from the webhook payload
    # this can be an array too, i.e: [pull_request, push]
    pipelinesascode.tekton.dev/on-event: "[pull_request]"

    # The branch or tag we are targeting (ie: main, refs/tags/*)
    pipelinesascode.tekton.dev/on-target-branch: "[main]"

    # Fetch the git-clone task from hub, we are able to reference later on it
    # with taskRef and it will automatically be embedded into our pipeline.
    ##pipelinesascode.tekton.dev/task: "git-clone:0.10.0"

    # Use golangci-lint from the hub to test our Golang project
    ##pipelinesascode.tekton.dev/task-1: "buildah:0.8.0"

    # You can add more tasks by increasing the suffix number, you can specify
    # them as array to have multiple of them.
    # browse the tasks you want to include from hub on https://hub.tekton.dev/
    #
    # pipelinesascode.tekton.dev/task-2: "[curl, buildah]"

    # how many runs we want to keep attached to this event
    ##pipelinesascode.tekton.dev/max-keep-runs: "5"
spec:
  params:
    # The variable with brackets are special to Pipelines as Code
    # They will automatically be expanded with the events from Github.
    - name: repo_url
      value: "{{ repo_url }}"
    - name: revision
      value: "{{ revision }}"
    - name: image
      value: "image-registry.openshift-image-registry.svc:5000/image-builds/base-image:{{ revision }}"
    #- name: namespace
    #  value: "base-image"
  pipelineSpec:
    params:
      - name: repo_url
      - name: revision
      #- name: IMAGE
      #- name: CONTAINERFILE_PATH
    workspaces:
      - name: source
      - name: basic-auth

    tasks:
      - name: fetch-repository
        taskRef:
          resolver: cluster
          params:
            - name: kind
              value: task
            - name: name
              value: git-clone-1-20-0
            - name: namespace
              value: openshift-pipelines
        workspaces:
          - name: output
            workspace: source
          - name: basic-auth
            workspace: basic-auth
        params:
          - name: URL
            value: $(params.repo_url)
          - name: REVISION
            value: $(params.revision)
          - name: DELETE_EXISTING
            value: "true"

      - name: build-image
        taskRef:
          resolver: cluster
          params:
            - name: kind
              value: task
            - name: name
              value: buildah-1-20-0
            - name: namespace
              value: openshift-pipelines
        workspaces:
          - name: source
            workspace: source
        params:
          - name: IMAGE
            value: "$(params.image)"
          - name: TLS_VERIFY
            value: true
          - name: VERBOSE
            value: false
          - name: DOCKERFILE
            value: ./containerfile
        runAfter:
          - fetch-repository

      - name: find-image-tag
        #params:
        #  - name: namespace
        #    value: image-builds
        taskSpec:
          params:
            - name: namespace
              type: string
              description: "Namespace where the imagestream will reside"
            #- name: image
            #  type: string
            #  description: "Image to use in this step - sourced at PipelineRun.spec.params"
            #- name: revision
            #  type: string
            #  description: "Git sha used on the image as a tag - sourced at PipelineRun.spec.params"
          steps:
            - name: find-tag-image
              image: "$(params.image)"
              script: |
                #!/bin/bash

                RELEASE=$(params.revision)
                NAMESPACE=$(params.namespace)
                TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
                TAG=$(skopeo list-tags  --tls-verify=false  --creds="serviceaccount:${TOKEN}" docker://image-registry.openshift-image-registry.svc.cluster.local:5000/$NAMESPACE/base-image | jq -r '.Tags[]')

                for i in $TAG; do
                  if [[ "$i" == "$RELEASE" ]]; then
                    echo "Candidate for tagging: this is the latest version - $i"
                    echo "Removing existing latest tag and retagging with $RELEASE"

                    oc tag "base-image:latest" -d -n "$NAMESPACE"
                    oc tag "base-image:$RELEASE" "base-image:latest" -n "$NAMESPACE"
                  fi
                done
        runAfter:
        - build-image

      - name: skopeo-copy-quay-io
        taskRef:
          resolver: cluster
          params:
            - name: kind
              value: task
            - name: name
              value: skopeo-copy
            - name: namespace
              value: openshift-pipelines
        params:
          - name: SOURCE_IMAGE_URL
            value: docker://image-registry.openshift-image-registry.svc.cluster.local:5000/$(params.namespace)/base-image:latest
          - name: DESTINATION_IMAGE_URL
            value: docker://quay.io/abavage/base-image/base-image:latest
        runAfter:
        - find-tag-image



  workspaces:
    - name: source
      volumeClaimTemplate:
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 1Gi
    # This workspace will inject secret to help the git-clone task to be able to
    # checkout the private repositories
    - name: basic-auth
      secret:
        secretName: "{{ git_auth_secret }}"
